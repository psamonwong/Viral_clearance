---
title: "Characterizing influenza viral kinetics"
author: "Phrutsamon Wongnak"
format: html
editor: visual
---

```{r}
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
library(webshot2)
library(webshot)
library(magick)

#conflicts_prefer(dplyr::filter)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('priors.R')
```

## *Load data*

*Set up analysis*

```{r}
Dmax <- c(5.5, 7.5, 14.5) # Maximum follow-up duration to be included
mITT_threshold <- 250 #Threshold for baseline viral loads to be considered mITT
use_threshold = T
Type <- c("A", "B", "All")
all_mods <-  c("Stan_models/Exponential_decay_model_basic.stan",
             "Stan_models/Bi_exponential_decay_model_basic.stan",
             "Stan_models/Up_and_down_model_basic.stan")

model_settings <- expand.grid(Dmax = Dmax,
            mITT_threshold = mITT_threshold,
            use_threshold = use_threshold,
            Type = Type,
            mod = all_mods)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

model_settings$prior = 1
model_settings$cov_matrices = 1

write.csv(model_settings, "Outputs/model_settings.csv", row.names = F)
```

```{r}
#| echo: false

#Import data
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
                                   from = c(1,2),
                                   to = c('Male','Female'))
adastra_dat$inf_diagyn <- as.factor(adastra_dat$inf_diagyn)
```

```{r}

# Setting up the analysis
covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)


for(i in 1:nrow(model_settings)){
  writeLines("Running the following job:")
  print(model_settings[i,])
  
  # Define populations by jobs
  adastra_dat_i <- make_mITT(adastra_dat, model_settings$use_threshold[i], model_settings$mITT_threshold[i], model_settings$Type[i])
  
  adastra_dat_i %>% distinct(ID, .keep_all = T) %>%
    group_by(mITT, fluType) %>%
    summarise(n = n(), .groups = "keep") %>%
    print()
    
  
  # Making analysis dataset
  adastra_dat_analysis =
  adastra_dat_i %>% ungroup() %>%
  filter(Time <= model_settings$Dmax[i], mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Site = as.factor(Site),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time)) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT))
  
  # Making baseline dataset
  Baseline_data = adastra_dat_analysis %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)
  
  # Making Table 1: Baseline characteristics
  tab.ff <- Baseline_data %>% 
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', 'weight',
                    'vaccine', 'inf_diagyn',
                    "Baseline.viral.load",'Sex', 'fluType' ,
                    'symptomDay'
    ),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
save_kable(tab.ff,file = paste0('Plots/Baseline_Characteristics/job_', i, '.html'))


# Analysis data
writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(adastra_dat_analysis$ID)),
                   nrow(adastra_dat_analysis),
                   sum(adastra_dat_analysis$CT<40),
                   round(100*mean(adastra_dat_analysis$CT<40))))
# Making stan inputs
stan_inputs <- NULL
stan_inputs = 
    make_stan_inputs(input_data_fit = adastra_dat_analysis,
                     int_covs_base = covs_base,
                     int_covs_full = covs_full,
                     slope_covs_base = c('fluType','Study_time'),
                     slope_covs_full = covs_full,
                     Dmax = model_settings$Dmax[i])

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_settings_job_', i,'.RData')
save(model_settings, 
     adastra_dat_analysis,
     adastra_dat_i,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
}
```

```{r}
i <- 1
for(i in 1:nrow(model_settings)){
  load(paste0('Rout/model_settings_job_', i,'.RData'))
  analysis_data_stan = stan_inputs$analysis_data_stan
  
 mod = stan_model(file = as.character(model_settings$mod[i])) # compile 

out = sampling(mod, 
               data=c(analysis_data_stan,
                      all_priors[[model_settings$prior[i]]]),
               iter=model_settings$Niter[i],
               chain=model_settings$Nchain[i],
               thin=model_settings$Nthin[i],
               warmup=model_settings$Nwarmup[i],
               save_warmup = T,
               seed=i,
               cores = 4,
               include=T)

file_name = paste0('Rout/model_fits_job_', i, '.RData') 

print(file_name)

save(out,
     file = file_name)
  
  
}
```

```{r}
pop_table = adastra_dat %>% distinct(ID, .keep_all = T) %>% arrange(baseline_vl)

writeLines(sprintf('Settings:\nInput data: %s \nData update: %s \nMaximum follow-up duration: %s days \nmITT threshold: %s \nFlu type: %s \nTotal patient number: %s \nmITT population: %s',
                   f_name,
                   file.info(f_name)$ctime %>% as.Date(),
                   ceiling(Dmax - 1),
                   ifelse(!use_threshold, "none", paste0(mITT_threshold, " genomes/mL")),
                   Lab,
                   nrow(pop_table),
                   sum(pop_table$mITT)   
                   ))
```

```{r}

  #analysis_data_stan$trt_mat = stan_inputs$Treatment_matrix
  #analysis_data_stan$K_trt = ncol(analysis_data_stan$trt_mat)
  
  # x_intercept = stan_inputs$cov_matrices$X_int[[model_settings$cov_matrices[i]]]
  # if(ncol(x_intercept)==0) x_intercept = array(0, dim=c(nrow(x_intercept),1))
  # analysis_data_stan$x_intercept = x_intercept
  # analysis_data_stan$K_cov_intercept= ncol(x_intercept)
  
  # x_slope = stan_inputs$cov_matrices$X_slope[[model_settings$cov_matrices[i]]]
  # if(ncol(x_slope)==0) x_slope = array(0, dim=c(nrow(x_slope),1))
  # analysis_data_stan$x_slope = x_slope
  # analysis_data_stan$K_cov_slope=ncol(x_slope)
  
  
```

```{r}
# 
# for(i in 1:length(all_mods)){
#   writeLines(sprintf('Working on the following model: %s',
#                    model_settings[i,]$mod))
# 
# mod = stan_model(file = as.character(model_settings$mod[i])) # compile 
# 
# out = sampling(mod, 
#                data=c(analysis_data_stan,
#                       all_priors[[model_settings$prior[i]]]),
#                iter=model_settings$Niter[i],
#                chain=model_settings$Nchain[i],
#                thin=model_settings$Nthin[i],
#                warmup=model_settings$Nwarmup[i],
#                save_warmup = T,
#                seed=i,
#                cores = 4,
#                include=T)
# 
# file_name = paste0('Rout/model_fits_type_', Lab, '_', ceiling(Dmax-1),'d_job_', i,'.RData') 
# 
# print(file_name)
# 
# save(out,
#      file = file_name)
# }
```

```{r}
adastra_dat_analysis %>%
  distinct(ID, .keep_all = T) %>%
  ungroup() %>%
  summarise(median_age = median(Age),
            q1_age = quantile(Age, 0.25),
            q3_age = quantile(Age, 0.75),
            median_onset = median(symptomDay),
            q1_onset = quantile(symptomDay, 0.25),
            q3_onset = quantile(symptomDay, 0.75)) %>%
  t()
```

# Leave one out

```{r}
Type = "All"
Dmax = 5.5
```

```{r}
ind_exp <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
                   grepl("Exponential", model_settings$mod))
load(paste0("Rout/model_fits_job_", ind_exp, ".RData"))
loo1 <- loo(extract_log_lik(out))
loo1
```

```{r}
ind_biexp <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
                     grepl("Bi_exponential", model_settings$mod))

load(paste0("Rout/model_fits_job_", ind_biexp, ".RData"))
loo2 <- loo(extract_log_lik(out))
loo2
```

```{r}
ind_updown <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
                      grepl("Up_and_down", model_settings$mod))

load(paste0("Rout/model_fits_job_", ind_updown, ".RData"))
loo3 <- loo(extract_log_lik(out))
loo3
```

```{r}
loo_compare(loo1, loo2, loo3)
```
