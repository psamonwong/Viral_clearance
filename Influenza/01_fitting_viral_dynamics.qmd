---
title: "Fitting viral dynamics"
format: html
editor: visual
---

```{r}
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)

#conflicts_prefer(dplyr::filter)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

## *Load data*

*Set up analysis*

```{r load_data}
Dmax =  8 # Maximu follow-up duration to be included: 5.5 or 8 
mITT_threshold <- 250 # Threshold for baseline viral loads to be considered mITT
use_threshold = T

Type <- "A" # Flu types: "A" or "B" or c("A", "B")
Lab <- ifelse(length(Type)>1, "A_and_B", Type) # To be used in output file names
```

```{r define_population}
#| echo: false
# set as file with relevant dataset
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
```

```{r}
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
                                   from = c(1,2),
                                   to = c('Male','Female'))

# Marked patients with some missing PCR data AND baseline viral density less than threshold
adastra_dat <- make_mITT(adastra_dat, use_threshold, mITT_threshold, Type)
```

```{r}
pop_table = adastra_dat %>% distinct(ID, .keep_all = T) %>% arrange(baseline_vl)

writeLines(sprintf('Settings:\nInput data: %s \nData update: %s \nMaximum follow-up duration: %s days \nmITT threshold: %s \nFlu type: %s \nTotal patient number: %s \nmITT population: %s',
                   f_name,
                   file.info(f_name)$ctime %>% as.Date(),
                   ceiling(Dmax - 1),
                   ifelse(!use_threshold, "none", paste0(mITT_threshold, " genomes/mL")),
                   Lab,
                   nrow(pop_table),
                   sum(pop_table$mITT)   
                   ))
```

### Make analysis dataset

```{r}
#| echo: false
adastra_dat_analysis =
  adastra_dat %>% ungroup() %>%
  filter(Time <= Dmax, mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Site = as.factor(Site),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time)) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT))
```

## Summarize baseline characteristics

```{r analysis_data}
Baseline_data = adastra_dat_analysis %>% ungroup() %>% 
  filter(Timepoint_ID==0) %>% 
  distinct(ID, .keep_all = T) %>%
  mutate(Baseline.viral.load = daily_VL,
         Baseline.CT = daily_CT)

tab.ff <- Baseline_data %>% 
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'BMI', 
                    #'vaccine',
                    "Baseline.viral.load",'Sex', 'fluType' ,
                    'symptomDay'
    ),
    total_col = TRUE, # add column with statistics for the whole sample
    add_row_total = TRUE, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
```

## *Fit models*

```{r}
#| echo: false
source('priors.R')

# Analysis data
writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   length(unique(adastra_dat_analysis$ID)),
                   nrow(adastra_dat_analysis),
                   sum(adastra_dat_analysis$CT<40),
                   round(100*mean(adastra_dat_analysis$CT<40))))

covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)

stan_inputs <- NULL
#trt_formulas <- c("~ Trt")
  stan_inputs = 
    make_stan_inputs(input_data_fit = adastra_dat_analysis,
                     int_covs_base = covs_base,
                     int_covs_full = covs_full,
                     slope_covs_base = c('fluType','Study_time'),
                     slope_covs_full = covs_full,
                     Dmax = Dmax)

```

```{r setup_models}
all_mods = c("Stan_models/Exponential_decay_model_basic.stan",
             "Stan_models/Bi_exponential_decay_model_basic.stan",
             "Stan_models/Up_and_down_model_basic.stan")
#list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = expand.grid(mod = all_mods,
                             prior = 1,
                             cov_matrices = 1)

model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_settings_type_', Lab, '_', ceiling(Dmax-1), 'd.RData')
save(model_settings, 
     adastra_dat_analysis,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
analysis_data_stan = stan_inputs$analysis_data_stan

  #analysis_data_stan$trt_mat = stan_inputs$Treatment_matrix
  #analysis_data_stan$K_trt = ncol(analysis_data_stan$trt_mat)
  
  # x_intercept = stan_inputs$cov_matrices$X_int[[model_settings$cov_matrices[i]]]
  # if(ncol(x_intercept)==0) x_intercept = array(0, dim=c(nrow(x_intercept),1))
  # analysis_data_stan$x_intercept = x_intercept
  # analysis_data_stan$K_cov_intercept= ncol(x_intercept)
  
  # x_slope = stan_inputs$cov_matrices$X_slope[[model_settings$cov_matrices[i]]]
  # if(ncol(x_slope)==0) x_slope = array(0, dim=c(nrow(x_slope),1))
  # analysis_data_stan$x_slope = x_slope
  # analysis_data_stan$K_cov_slope=ncol(x_slope)
  
  
```

```{r}
i <- 3
writeLines(sprintf('Working on the following model: %s',
                   model_settings[i,]$mod))
```

```{r}
mod = stan_model(file = as.character(model_settings$mod[i])) # compile 
```

```{r}
out = sampling(mod, 
               data=c(analysis_data_stan,
                      all_priors[[model_settings$prior[i]]]),
               iter=model_settings$Niter[i],
               chain=model_settings$Nchain[i],
               thin=model_settings$Nthin[i],
               warmup=model_settings$Nwarmup[i],
               save_warmup = FALSE,
               seed=i,
               cores = 4,
               # pars=c('alpha_0', 'beta_0', 't_dof',
               #        'sigma_logvl', 'sigmasq_u', 'L_Omega'), # only save trt effect parameter 
               include=T)

file_name = paste0('Rout/model_fits_type_', Lab, '_', ceiling(Dmax-1),'d_job_', i,'.RData') 
print(file_name)
save(out,
     file = file_name)
```

## Outputs

```{r}
Lab <- "A"
i <- 3
Dmax <- 8

f_name <- paste0('Rout/model_fits_type_', Lab, '_', ceiling(Dmax-1),'d_job_', i,'.RData') 

load(f_name)
```

```{r}
trace <- traceplot(out, pars = c("sigmasq_u"))
trace
```

```{r}
file_name = paste0('Plots/trace_plot_type_', Lab, '_', ceiling(Dmax-1),'d_job_', i,'.png') 

png(file_name, width = 12, height = 6, units = "in", res = 350)
trace
dev.off()
```

```{r}
post <- rstan::extract(out,c("sigma_logvl", "alpha_0", "beta_0", 'sigmasq_u', "theta_rand_id"))

post_summary <- NULL
for(j in 1:length(post)){
  post_summary <- rbind(post_summary, apply(as.data.frame(post[j]),2, quantile, c(0.025, 0.5, 0.975)) %>% t())
}
colnames(post_summary) <- c('Low', "Med", "Up")
post_summary <- post_summary %>%
  as.data.frame() %>%
  rownames_to_column(var = "params") %>%
  mutate(
    lab = paste0(
      round(Med, 1), " [95% CrI: ",
      round(Low,1), " to ",
      round(Up,1), "]"
    )
  )
post_summary    
```

```{r}
file_name = paste0('Outputs/posterior_estimates', Lab, '_', ceiling(Dmax-1),'d_job_', i,'.csv') 
write.csv(post_summary, file_name, row.names = F)
```

```{r}
model_selects <- 1
ff = "Rout/model_fits_type_A_7d_job_3.RData"

ind_plot_list <- plot_inds(model_selects, Baseline_data)
ind_plot_all <- ggarrange(plotlist =  ind_plot_list, nrow = 4, ncol = 4)#, common.legend = T, legend = "right")
ind_plot_all
```

```{r}
for(i in 1:length(ind_plot_all)){
  fname <- paste0("Plots/Ind_plots/Plots_individual_", i, ".png")
  png(fname, width = 10, height = 8, units = 'in', res = 350)
  print(annotate_figure( ind_plot_all[[i]], bottom = textGrob("Time since randomisation (days)", vjust = 0.5, gp = gpar(cex = 1.2, fontface="bold")),
                         left = textGrob("Viral densities (genomes/mL)", rot = 90, gp = gpar(cex = 1.2, fontface="bold"))))
  dev.off()
  
}
```

```{r}
ind_res <- 1
cov <- 1
cov_intercept <- 2

#Extract slope coefficients
slope_coefs <- rstan::extract(out, "slope_coefs")
slope_coefs_summary <- as.data.frame(t(apply(slope_coefs$slope_coefs, 2, quantile, c(0.025, 0.5, 0.975))))
colnames(slope_coefs_summary) <- c("Low", "Med", "Up")

#Extract intercept coefficients
intercept_coefs <- rstan::extract(out, "intercept_coefs")
intercept_coefs_summary <- as.data.frame(t(apply(intercept_coefs$intercept_coefs, 2, quantile, c(0.025, 0.5, 0.975))))
colnames(intercept_coefs_summary) <- c("Low", "Med", "Up")

#Extract covariate names
cov_names <- colnames(stan_inputs$cov_matrices$X_slope[[cov]])
cov_names_intercept <- colnames(stan_inputs$cov_matrices$X_slope[[cov_intercept]])

slope_coefs_summary$cov <- cov_names
intercept_coefs_summary$cov <- cov_names_intercept

slope_coefs_summary$type <- "Slope"
intercept_coefs_summary$type <- "Intercept"

coefs_summary <- rbind(slope_coefs_summary, intercept_coefs_summary)
#coefs_summary <- coefs_summary[-grep("Site", coefs_summary$cov), ]

coefs_summary$cov <- as.factor(coefs_summary$cov)


#Exponentiate coefficient for slope
coefs_summary[coefs_summary$type == "Slope", 1:3] <- formatter(exp(coefs_summary[coefs_summary$type == "Slope", 1:3]))

#Exponentiate coefficient for intercept
coefs_summary[coefs_summary$type == "Intercept", 1:3] <- formatter(10^(coefs_summary[coefs_summary$type == "Intercept", 1:3]))


G_cov1 <- ggplot(coefs_summary[coefs_summary$type == "Slope",]) +
  geom_point(aes(x = cov, y = Med), size = 3.5, alpha = 0.75, col = "#1D2B53") +
  geom_errorbar(aes(x = cov, ymin = Low, ymax = Up), width = 0, alpha = 0.75, linewidth = 1, col = "#1D2B53") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  #facet_wrap(.~type) +
  ggtitle("B) Effects on viral clearance rate") +
  coord_flip() +
  theme_bw() +
  xlab("") +
  ylab("Change in viral clearance rate (%)") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        panel.spacing = unit(1, "lines")) +
  ylim(-100, 100)
G_cov1

G_cov2 <- ggplot(coefs_summary[coefs_summary$type == "Intercept",]) +
  geom_point(aes(x = cov, y = Med), size = 3.5, alpha = 0.75, col = "#1D2B53") +
  geom_errorbar(aes(x = cov, ymin = Low, ymax = Up), width = 0, alpha = 0.75, linewidth = 1, col = "#1D2B53") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  #facet_wrap(.~type) +
  ggtitle("A) Effects on baseline viral density") +
  coord_flip() +
  theme_bw() +
  xlab("") +
  ylab("Change in baseline viral density (%)") +
  theme(strip.text = element_text(size = 10, face = "bold"),
        axis.title = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        panel.spacing = unit(1, "lines")) +
  ylim(-1000, 2000)
G_cov2


png("Plots/Covariates.png", width = 10, height = 4, res = 350, units = 'in')
ggarrange(G_cov2, G_cov1)
dev.off()
```

```{r}
# Half-life flu A
slope_to_hl(post_summary[3,2:4]) %>% round(1)
```

```{r}
# Half-life flu B
quantile(post$beta_0 * exp(slope_coefs$slope_coefs[,1]), c(0.025, 0.5, 0.975)) %>%
  slope_to_hl() %>% round(1)
```

## Plot recruitment

```{r timeline}
timeline <- plot_randomisation(adastra_dat %>% distinct(ID, Rand_date, Trt, fluType))
timeline
```

## *Baseline characteristics*

```{r}
adastra_dat = adastra_dat %>% filter(mITT, fluType %in% Type) %>% group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         daily_CT = mean(CT)) %>% 
  ungroup() %>%
  mutate(Site = as.factor(Site),
         Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) #normalise
  )
```

```{r base_vl_plot}
base_vl_plot <-  plot_vl_base(adastra_dat, fluType = T) 
base_vl_plot
```

```{r}
plot_name <- paste0('Plots/viral_dynamics_type_', Type,'.png')

png(plot_name, width = ifelse(length(Type) > 1, 8, 4), height = 4, units = 'in', res = 350)
base_vl_plot
dev.off()
```
