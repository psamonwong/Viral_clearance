ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type)[1]
#| echo: false
load(paste0("Rout/model_settings_job_", ind, ".RData"))
load(paste0("Rout/model_fits_job_", ind, ".RData"))
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/viral_dynamics_type_', Type,'.png')
png(plot_name, width = ifelse(Type == "All", 8, 4), height = 4, units = 'in', res = 350)
print(plot_vl_base(adastra_dat_analysis, fluType = T) )
dev.off()
}
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 14.5
Type <- "All"
ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type)[1]
#| echo: false
load(paste0("Rout/model_settings_job_", ind, ".RData"))
load(paste0("Rout/model_fits_job_", ind, ".RData"))
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/viral_dynamics_type_', Type,'.png')
png(plot_name, width = ifelse(Type == "All", 8, 4), height = 4, units = 'in', res = 350)
print(plot_vl_base(adastra_dat_analysis, fluType = T) )
dev.off()
}
adastra_dat_analysis %>%
group_by(fluType, Timepoint_ID) %>%
summarise(censored = sum(censor == "left"), .groups = "keep",
n = n(),
percentage = round(censored*100/n))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID) %>%
summarise(censored = any(censor == "left"), .groups = "keep")
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup()
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup()
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
percentage = round(sum(censored)*100/n))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)")) %>%
pivot_wider(names_from = paste0("D", Timepoint_ID),
values_from = lab)
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"),
Timepoint_ID = paste0("D", Timepoint_ID)) %>%
pivot_wider(names_from = Timepoint_ID,
values_from = lab)
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"),
Timepoint_ID = paste0("D", Timepoint_ID)) %>%
pivot_wider(names_from = fluType,
values_from = lab)
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"),
Timepoint_ID = paste0("D", Timepoint_ID))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"),
Timepoint_ID = paste0("D", Timepoint_ID))
adastra_dat_analysis %>%
group_by(Timepoint_ID, ID, fluType) %>%
summarise(censored = any(censor == "left"), .groups = "keep") %>%
ungroup() %>%
group_by(Timepoint_ID, fluType) %>%
summarise(n = n(),
n_censored = sum(censored),
percentage = round(n_censored*100/n)) %>%
ungroup() %>%
mutate(lab = paste0(n_censored, "/", n, " (", percentage, "%)"),
Timepoint_ID = paste0("D", Timepoint_ID))
alpha_0 <-  rstan::extract(out, pars = 'alpha_0')$alpha_0 %>% median()
beta_0 <-  rstan::extract(out, pars = 'beta_0')$beta_0 %>% median()
slope <-  rstan::extract(out, pars = 'slope')
slope <- apply(slope$slope, 2, median)
preds <-  rstan::extract(out, pars = 'preds')
preds <- apply(preds$preds, 2, median)
preds_d0 <- preds[stan_inputs$analysis_data_stan$ind_start]
fluType <- stan_inputs$cov_matrices$X_int[[1]][,2][stan_inputs$analysis_data_stan$ind_start]
fluType <- ifelse(fluType == 1, "B", "A")
symptomDay <- stan_inputs$cov_matrices$X_int[[1]][,1][stan_inputs$analysis_data_stan$ind_start]
dat_plot <- data.frame(fluType, preds_d0, slope, symptomDay = as.factor(symptomDay))
cor <- cor.test(dat_plot$preds_d0, dat_plot$slope, method = "pearson")
lab <- paste0('Correlation coefficient:\n', round(cor$estimate,2), " [95%CI: ", round(cor$conf.int[1],2), " to ", round(cor$conf.int[2],2), "]")
G <- ggplot(dat_plot, aes(y = preds_d0, x = slope, col = fluType, shape = symptomDay)) +
geom_point(size = 3.5, alpha = 0.8) +
geom_point(x = beta_0, y = alpha_0, size = 5.5, col = "#2A3335", shape = 18, alpha = 0.8) +
theme_bw(base_size = 13) +
xlim(-5,0) +
xlab("Viral clearance rate \n(log10 genomes/mL/day)") +
ylab("Estimated admission viral densities \n(log10 genomes/mL)") +
scale_y_continuous(breaks = seq(0,8,1)) +
scale_color_manual(values = c("#EE4266", "#387ADF"), name = "Influenza type") +
scale_shape_manual(values = c(16, 17, 15, 25), name = "Day(s) since\nsymptom onset") +
#annotate('text', x = -4, y = 6, label = lab) +
coord_flip()
G
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/profile_map_', Type, "_", floor(Dmax), '.png')
png(plot_name, width = 8, height = 5, units = 'in', res = 350)
print(G)
dev.off()
}
cor.test(dat_plot$preds_d0, dat_plot$slope, method = "spearman")
mod <- lm(slope ~ preds_d0 + fluType, data = dat_plot)
summary(mod)
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 5.5
Type <- "All"
data_plot <- list()
pred_plot <- list()
# exponential decay model
ind_exp <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
grepl("Exponential", model_settings$mod))
load(paste0("Rout/model_settings_job_", ind_exp, ".RData"))
load(paste0("Rout/model_fits_job_", ind_exp, ".RData"))
data_plot[[1]] <- adastra_dat_analysis
preds <-  rstan::extract(out, pars = 'preds')
data_plot[[1]]$preds <- apply(preds$preds, 2, median)
data_plot[[1]]$mod <- model_settings$mod[ind_exp]
alpha_0 <-  rstan::extract(out, pars = 'alpha_0')$alpha_0
beta_0 <-  rstan::extract(out, pars = 'beta_0')$beta_0
t <- seq(0,14,0.1)
preds_exp <- matrix(nrow = length(t), ncol = length(alpha_0))
for(i in 1:ncol(preds_exp)){
preds_exp[,i] <- alpha_0[i] + beta_0[i] * t
}
pred_plot[[1]] <- data.frame(t = t,
med = apply(preds_exp,1, median),
low = apply(preds_exp,1, quantile, 0.025),
up = apply(preds_exp,1, quantile, 0.975),
mod = model_settings$mod[ind_exp])
# bi-exponential decay model
ind_biexp <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
grepl("Bi_exponential", model_settings$mod))
load(paste0("Rout/model_settings_job_", ind_biexp, ".RData"))
load(paste0("Rout/model_fits_job_", ind_biexp, ".RData"))
data_plot[[2]] <- adastra_dat_analysis
preds <-  rstan::extract(out, pars = 'preds')
data_plot[[2]]$preds <- apply(preds$preds, 2, median)
data_plot[[2]]$mod <- model_settings$mod[ind_biexp]
coef <- rstan::extract(out, pars = 'coef')$coef
intercept <- rstan::extract(out, pars = 'intercept')$intercept
t <- seq(0,14,0.1)
preds_biexp <- matrix(nrow = length(t), ncol = nrow(coef))
for(i in 1:ncol(preds_biexp)){
preds_biexp[,i] <- log((exp(intercept[i,2] - coef[i,2]*t)) + (exp(intercept[i,1] - coef[i,1]*t)) )
}
pred_plot[[2]] <- data.frame(t = t,
med = apply(preds_biexp,1, median),
low = apply(preds_biexp,1, quantile, 0.025),
up = apply(preds_biexp,1, quantile, 0.975),
mod = model_settings$mod[ind_biexp])
# up-down model
ind_updown <- which(model_settings$Dmax == Dmax & model_settings$Type == Type &
grepl("Up_and_down", model_settings$mod))
load(paste0("Rout/model_settings_job_", ind_updown, ".RData"))
load(paste0("Rout/model_fits_job_", ind_updown, ".RData"))
data_plot[[3]] <- adastra_dat_analysis
preds <-  rstan::extract(out, pars = 'preds')
data_plot[[3]]$preds <- apply(preds$preds, 2, median)
data_plot[[3]]$mod <- model_settings$mod[ind_updown]
alpha_0 <- rstan::extract(out, pars = 'alpha_0')$alpha_0
tmax_pop <- rstan::extract(out, pars = 'tmax_pop')$tmax_pop
beta_0 <- rstan::extract(out, pars = 'beta_0')$beta_0
t <- seq(0,14,0.1)
preds_updown <- matrix(nrow = length(t), ncol = nrow(beta_0))
for(i in 1:ncol(preds_updown)){
preds_updown[,i] <- alpha_0[i] + log((beta_0[i,1] + beta_0[i,2])/((beta_0[i,2] * exp(-1 * beta_0[i,1] * (t - tmax_pop[i]))) + (beta_0[i,1] * exp(beta_0[i,2] * (t - tmax_pop[i])))))
}
pred_plot[[3]] <- data.frame(t = t,
med = apply(preds_updown,1, median),
low = apply(preds_updown,1, quantile, 0.025),
up = apply(preds_updown,1, quantile, 0.975),
mod = model_settings$mod[ind_updown])
pred_Plot <- do.call("rbind", pred_plot)
data_Plot <- do.call("rbind", data_plot)
data_Plot_median <- data_Plot %>% distinct(ID, Timepoint_ID, mod, .keep_all = T) %>%
group_by(Timepoint_ID, mod) %>%
summarise(med = median(preds),
med_vl = median(daily_VL))
data_Plot2 <- data_Plot %>% distinct(ID, Timepoint_ID, .keep_all = T)
levels(data_Plot2$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
levels(data_Plot_median$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
levels(pred_Plot$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
title_lab <- ifelse(Type == "All", "Influenza A and B",
ifelse(Type == "A", "Influenza A",
"Influenza B"))
pred_Plot <- pred_Plot %>% filter(t <= floor(Dmax))
G_pred <- ggplot() +
geom_line(data = pred_Plot, mapping = aes(x = t, y = med, col = mod),  linewidth = 2, alpha = 0.75) +
geom_point(data = data_Plot2, mapping = aes(x = Timepoint_ID, y = daily_VL, shape = censor),
alpha = 0.2, size = 2) +
geom_line(data = data_Plot2, mapping = aes(x = Timepoint_ID, y = daily_VL, group = ID),
alpha = 0.5, linewidth = 0.1) +
geom_point(data = data_Plot_median, mapping = aes(x = Timepoint_ID, y = med_vl),
alpha = 0.75, size = 4, col = 'grey20', shape = 17) +
geom_line(data = data_Plot_median, mapping = aes(x = Timepoint_ID, y = med_vl),
alpha = 0.75, linewidth = 1, col = 'grey20') +
#  geom_point(data = pred_Plot, mapping = aes(x = t, y = med, col = mod), size = 3, alpha = 0.75) +
geom_hline(yintercept = 0, col = 'red', linetype = "dashed") +
scale_shape_manual(values = c(6,1), guide = NULL) +
scale_color_manual(values = c("#0A5EB0", "#F72C5B","#F26B0F"), name = "Models") +
coord_cartesian(xlim=c(0, floor(Dmax)),
ylim = c(0,8)) +
scale_x_continuous(breaks = seq(0,floor(Dmax),1)) +
theme_bw(base_size = 13) +
theme(axis.title  = element_text(face = "bold"),
clip = "off") +
xlab("Time since randomisation (days)") +
ylab("Viral densities \n(log10 genomes/mL)") +
ggtitle("A) Predicted clearance kinetics")
G_pred
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/prediction_', Type, "_", floor(Dmax), '.png')
png(plot_name, width = 8, height = 5, units = 'in', res = 350)
print(G_pred)
dev.off()
}
# Rediduals
levels(data_Plot$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
data_Plot <- data_Plot %>%
group_by(ID, Timepoint_ID, mod) %>%
mutate(rediduals = log10_viral_load - preds) %>%
ungroup()
resid_plot <- ggplot(data_Plot, aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(25, 21), name = "Censor") +
scale_fill_manual(values = rev(c("#38419D", "#BF3131")), name = "Censor") +
scale_color_manual(values = rev(c("#38419D", "#BF3131")), name = "Censor") +
ggtitle("B) Residuals")
resid_plot
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(25, 21), name = "Censor") +
scale_fill_manual(values = rev(c("#38419D", "#BF3131")), name = "Censor") +
scale_color_manual(values = rev(c("#38419D", "#BF3131")), name = "Censor") +
ggtitle("B) Residuals")
resid_plot
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(25, 21), name = "Censor", guide = NA) +
scale_fill_manual(values = rev(c("#38419D")), name = "Censor", guide = NA) +
scale_color_manual(values = rev(c("#38419D")), name = "Censor", guide = NA) +
ggtitle("B) Residuals")
#"#BF3131"
resid_plot
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(25, 21), name = "Censor", guide = NULL) +
scale_fill_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
scale_color_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
ggtitle("B) Residuals")
#"#BF3131"
resid_plot
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(21), name = "Censor", guide = NULL) +
scale_fill_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
scale_color_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
ggtitle("B) Residuals")
#"#BF3131"
resid_plot
Plot_now = F
if(Plot_now){
plot_name <- paste0('Plots/residuals_', Type, "_", floor(Dmax), '.png')
png(plot_name, width = 8, height = 5, units = 'in', res = 350)
print(resid_plot)
dev.off()
}
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/residuals_', Type, "_", floor(Dmax), '.png')
png(plot_name, width = 8, height = 5, units = 'in', res = 350)
print(resid_plot)
dev.off()
}
library(ggpubr)
Plot_now = T
if(Plot_now){
plot_name <- paste0('Plots/prediction_residuals_', Type, "_", floor(Dmax), '.png')
png(plot_name, width = 8, height = 8, units = 'in', res = 350)
print(ggarrange(G_pred, resid_plot, ncol = 1))
dev.off()
}
# Rediduals
levels(data_Plot$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
data_Plot <- data_Plot %>%
group_by(ID, Timepoint_ID, mod) %>%
mutate(rediduals = log10_viral_load - preds) %>%
ungroup()
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(fluType~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(21), name = "Censor", guide = NULL) +
scale_fill_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
scale_color_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
ggtitle("B) Residuals")
#"#BF3131"
resid_plot
# Rediduals
levels(data_Plot$mod) <- c("Exponential decay", "Bi-exponential decay", "Growth-and-decay")
data_Plot <- data_Plot %>%
group_by(ID, Timepoint_ID, mod) %>%
mutate(rediduals = log10_viral_load - preds) %>%
ungroup()
resid_plot <- ggplot(data_Plot %>% filter(censor == "none"), aes(x = as.factor(Timepoint_ID), y = rediduals)) +
geom_jitter(width = 0.2, alpha = 0.4, size = 1.5, aes(shape = censor, fill = censor, col=censor)
) +
geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.6) +
theme_bw(base_size = 13) +
facet_grid(.~ mod) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
xlab("Time since randomisation (days)") +
ylab("Residuals") +
theme(
axis.title  = element_text(face = "bold"),
strip.text = element_text(face = "bold"),
legend.position = "right"
) +
scale_shape_manual(values = c(21), name = "Censor", guide = NULL) +
scale_fill_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
scale_color_manual(values = rev(c("#38419D")), name = "Censor", guide = NULL) +
ggtitle("B) Residuals")
#"#BF3131"
resid_plot
#Individual plots
data_Plot$censor <- as.factor(data_Plot$censor)
IDs <-data_Plot %>%
arrange(fluType, ID, Time) %>%
pull(ID) %>%
unique()
ind_plot_list <- list()
for(i in 1:length(IDs)){
data_Plot_i <- data_Plot %>% filter(ID == IDs[i])
data_Plot_median_i <- data_Plot_i %>% group_by(Timepoint_ID) %>%
mutate(med_vl = median(log10_viral_load)) %>%
ungroup() %>%
distinct(Timepoint_ID, .keep_all = T) %>%
select(Time, med_vl)
lab <- paste0(data_Plot_i$ID[1], "\nInfluenza ", data_Plot_i$fluType[1])
ind_plot_list[[i]] <- ggplot(data_Plot_i, aes(x = Time)) +
geom_point(aes(y = log10_viral_load, shape = censor), size = 1.75) +
geom_line(aes(y = preds, col = mod), linewidth = 1, alpha = 0.75) +
#geom_point(data = data_Plot_median_i, mapping = aes(x = Time, y = med_vl),
#           size=1.75, shape = 17, alpha = 0.75) +
#geom_line(data = data_Plot_median_i, mapping = aes(x = Time, y = med_vl),
#          linetype = "dashed", , alpha = 0.75) +
scale_color_manual(values = c("#69247C", "#DA498D","#F29F58"), name = "Models") +
theme_bw(base_size = 10)   +
scale_y_continuous(labels=label_math(), breaks = seq(0,8,2)) +
coord_cartesian(ylim = c(0,8), xlim = c(0,5)) +
scale_shape_manual(values = c(25, 21), guide = "none", drop=FALSE) +
geom_hline(yintercept = 0, col = 'red', linetype = "dashed") +
ylab("") +
xlab("")  +
ggtitle(lab) +
theme(plot.title = element_text(face = "bold",hjust = 0.5, size = 8))
}
ind_plot_all <- ggarrange(plotlist =  ind_plot_list, nrow = 4, ncol = 4, common.legend = T, legend = "right")
plot_now = T
if(plot_now){
for(i in 1:length(ind_plot_all)){
png(paste0("Plots/Individual_plots/Ind_plot_", i, ".png"), width = 12, height = 8, units = "in", res = 350)
print(annotate_figure( ind_plot_all[[i]], bottom = textGrob("Time since randomisation (days)", vjust = 0.5, gp = gpar(cex = 1.2, fontface="bold")),
left = textGrob("Viral densities (genomes/mL)", rot = 90, gp = gpar(cex = 1.2, fontface="bold"))))
dev.off()
}
}
