a <- r * exp(-s * M) #birth rate as a function of population size
# Total population
M <- LQ + LF + A
# Parameters
r <- 30 # average offspring
s <- 0.0075 # s > 0 density-dependent regulation
d_L <- 0.0056 # mortality rate of larvae
beta <- 0.015 # encounter rate between questing larvae and hosts
sigma <- 0.1 # dropping rate
m <- 0.15 # averaged fraction of immature feeding mites which survies and develops to the next stage
d_A <- 0.006 # mortality rate of adults
b <- 0.003 # birth rate of hosts
d_H <- 0.003 # death rate of hosts
# Initial conditions
initial(LQ) <- 0
initial(LF) <- 0
initial(A) <- 1
initial(H) <- 20
})
# Generate the model
mod <- model()
# Model 1 from Kim 2010
# Mite-host dynamics without infections
model <- odin::odin({
# The ODEs
deriv(LQ) <- a * A - d_L * LQ - beta * H * LQ # questing larvae
deriv(LF) <- beta * H * LQ - sigma * LF # feeding larvae
deriv(A) <- m * sigma * LF - d_A * A # adults
deriv(H) <- (b - d_H) * H # Host dynamics
a <- r * exp(-s * M) #birth rate as a function of population size
# Total population
M <- LQ + LF + A
# Parameters
r <- 30 # average offspring
s <- 0.0075 # s > 0 density-dependent regulation
d_L <- 0.0056 # mortality rate of larvae
beta <- 0.015 # encounter rate between questing larvae and hosts
sigma <- 0.1 # dropping rate
m <- 0.15 # averaged fraction of immature feeding mites which survies and develops to the next stage
d_A <- 0.006 # mortality rate of adults
b <- 0.003 # birth rate of hosts
d_H <- 0.003 # death rate of hosts
# Initial conditions
initial(LQ) <- 0
initial(LF) <- 0
initial(A) <- 1
initial(H) <- 20
})
# Generate the model
mod <- model()
# Model 1 from Kim 2010
# Mite-host dynamics without infections
pop_model <- odin::odin({
# The ODEs
deriv(LQ) <- a * A - d_L * LQ - beta * H * LQ # questing larvae
deriv(LF) <- beta * H * LQ - sigma * LF # feeding larvae
deriv(A) <- m * sigma * LF - d_A * A # adults
deriv(H) <- (b - d_H) * H # Host dynamics
a <- r * exp(-s * M) #birth rate as a function of population size
# Total population
M <- LQ + LF + A
# Parameters
r <- 30 # average offspring
s <- 0.0075 # s > 0 density-dependent regulation
d_L <- 0.0056 # mortality rate of larvae
beta <- 0.015 # encounter rate between questing larvae and hosts
sigma <- 0.1 # dropping rate
m <- 0.15 # averaged fraction of immature feeding mites which survies and develops to the next stage
d_A <- 0.006 # mortality rate of adults
b <- 0.003 # birth rate of hosts
d_H <- 0.003 # death rate of hosts
# Initial conditions
initial(LQ) <- 0
initial(LF) <- 0
initial(A) <- 1
initial(H) <- 20
})
# Generate the model
mod <- pop_model()
# Generate the model
mod <- pop_model$new()
# Time points to solve the model at
times <- seq(0, 160, by = 1)
# Time points to solve the model at
times <- seq(0, 500, by = 1)
# Initial state
yini <- c(LQ = 0, LF = 0, A = 1, H = 20)
# Solve the model
result <- mod$run(times, yini)
################################################################################
as.data.frame(result)
library(dplyr)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
library(ggplot2)
ggplot(result, aes(x = t, y = LQ)) +
geom_line()
ggplot(result, aes(x = t)) +
geom_line(aes(y = LQ))
ggplot(result, aes(x = t)) +
geom_line(aes(y = LQ)) +
geom_line(aes(y = A))
ggplot(result, aes(x = t)) +
geom_line(aes(y = LQ)) +
geom_line(aes(y = A), col = "red")
library(tidyr)
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values")
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
as.data.frame()
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage) %>%
as.data.frame()
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
ggplot(result[result$stage != "H",], aes(x = t, y = value, col = stage)) +
theme_bw()
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
theme_bw()
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
a <- 30 * exp(-0.0075 * 1:100)
plot(1:100, a, type = "l")
################################################################################
a <- 30 * exp(-0.0075 * 1:1000)
plot(1:1000, a, type = "l")
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Solve the model
result <- mod$run(times, yini,
d_H = 0.00001) %>% as.data.frame()
#install.packages("odin")
################################################################################
# Load the odin package
library(odin)
library(dplyr)
library(ggplot2)
library(tidyr)
################################################################################
# Define the model using odin
# Model 1 from Kim 2010
# Mite-host dynamics without infections
pop_model <- odin::odin({
# The ODEs
deriv(LQ) <- a * A - d_L * LQ - beta * H * LQ # questing larvae
deriv(LF) <- beta * H * LQ - sigma * LF # feeding larvae
deriv(A) <- m * sigma * LF - d_A * A # adults
deriv(H) <- (b - d_H) * H # Host dynamics
a <- r * exp(-s * M) #birth rate as a function of population size
# Total population
M <- LQ + LF + A
# Parameters
r <- user(30) # average offspring
s <- user(0.0075) # s > 0 density-dependent regulation
d_L <- user(0.0056) # mortality rate of larvae
beta <- user(0.015) # encounter rate between questing larvae and hosts
sigma <- user(0.1) # dropping rate
m <- user(0.15) # averaged fraction of immature feeding mites which survies and develops to the next stage
d_A <- user(0.006) # mortality rate of adults
b <- user(0.003) # birth rate of hosts
d_H <- user(0.003) # death rate of hosts
# Initial conditions
initial(LQ) <- 0
initial(LF) <- 0
initial(A) <- 1
initial(H) <- 20
})
################################################################################
# Generate the model
mod <- pop_model$new()
# Time points to solve the model at
times <- seq(0, 500, by = 1)
# Initial state
yini <- c(LQ = 0, LF = 0, A = 1, H = 20)
# Solve the model
result <- mod$run(times, yini,
d_H = 0.00001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
result
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.001)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.01)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.005)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.008)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.009)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15)
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15) +
xlab("Time")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15) +
xlab("Time") +
ylab("Counts")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 20) +
xlab("Time") +
ylab("Counts")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1.5) +
theme_bw(base_size = 20) +
xlab("Time") +
ylab("Counts")
1+1
2+3
11111.1
setwd("~/Project/Viral_clearance/Influenza")
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
#conflicts_prefer(dplyr::filter)
## information on software/hardware used
version
sessionInfo()
rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = 5.5
RUN_MODELS = F
my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
mITT_threshold <- 250
use_threshold = T
Type <- "A" # "A" or "B" or c("A", "B")
Lab <- ifelse(length(Type)>1, "A_and_B", Type)
#| echo: false
# set as file with relevant dataset
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
# Check missing PCR data by time point
check_PCR_missing <- adastra_dat %>%
mutate(count = 1,
Timepoint_ID = paste0("D", Timepoint_ID)) %>%
group_by(ID, Timepoint_ID) %>%
summarise(n = n()) %>%
pivot_wider(names_from = Timepoint_ID, values_from = n) %>%
mutate(all_pcr_early = !is.na(sum(D0, D1, D2, D3)))
adastra_dat <- merge(adastra_dat, check_PCR_missing[,c("ID", "all_pcr_early")], all.x = T)
#| echo: false
adastra_dat = adastra_dat %>% group_by(ID) %>%
mutate(
baseline_vl = mean(log10_viral_load[which(Timepoint_ID==0)]),
mITT = ifelse(use_threshold, baseline_vl > log10(mITT_threshold), T) &
all_pcr_early)
pop_table = adastra_dat %>% distinct(ID, .keep_all = T) %>% arrange(baseline_vl)
print(table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT))
table(pop_table$fluType, pop_table$mITT)
timeline <- plot_randomisation(adastra_dat %>% distinct(ID, Rand_date, Trt, fluType))
timeline
adastra_dat = adastra_dat %>% filter(mITT, fluType %in% Type) %>% group_by(ID, Timepoint_ID) %>%
mutate(daily_VL = mean(log10_viral_load),
daily_CT = mean(CT)) %>%
ungroup() %>%
mutate(Site = as.factor(Site),
Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
Study_time = scale(Study_time) #normalise
)
base_vl_plot <-  plot_vl_base(adastra_dat, fluType = T)
base_vl_plot
#| echo: false
adastra_dat_analysis =
adastra_dat %>% ungroup() %>%
filter(Time <= Dmax, mITT) %>%
arrange(log10_viral_load==log10_cens_vl) %>%
mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
Mean_age = mean(Age[!duplicated(ID)]),
SD_age = sd(Age[!duplicated(ID)]),
Age_scaled = (Age-Mean_age)/SD_age)
Baseline_data = adastra_dat_analysis %>% ungroup() %>%
filter(Timepoint_ID==0) %>%
distinct(ID, .keep_all = T) %>%
mutate(Baseline.viral.load = daily_VL,
Baseline.CT = daily_CT)
tab.ff <- Baseline_data %>%
summary_factorlist(
dependent = "Trt", # name of grouping / treatment variable
explanatory = c("Site", "Age", 'BMI',
#'vaccine',
"Baseline.viral.load",'Sex', 'fluType' ,
'symptomDay'
),
total_col = TRUE, # add column with statistics for the whole sample
add_row_total = TRUE, # add column with number of valid cases
include_row_missing_col = FALSE,
add_dependent_label = T,
na_include = TRUE # make variables' missing data explicit
) %>%
kbl(
caption = "Baseline characteristics",
booktabs = TRUE,
align = "lrlrrr",
) %>%
kable_classic(full_width = FALSE)
tab.ff
# save_kable(tab.ff,file = 'Baseline_characteristics.png')
#| echo: false
source('priors.R')
# Analysis data
writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
length(unique(adastra_dat_analysis$ID)),
nrow(adastra_dat_analysis),
sum(adastra_dat_analysis$CT<40),
round(100*mean(adastra_dat_analysis$CT<40))))
covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)
stan_inputs <- list()
trt_formulas <- c("~ Trt")
for(i in 1:length(trt_formulas)){
stan_inputs[[i]] =
make_stan_inputs(input_data_fit = adastra_dat_analysis,
int_covs_base = covs_base,
int_covs_full = covs_full,
slope_covs_base = c('fluType','Study_time'),
slope_covs_full = covs_full,
#   trt_frmla = formula(trt_formulas[i]),
Dmax = Dmax)
}
all_mods = c("Stan_models/Exponential_decay_model_basic.stan",
"Stan_models/Bi_exponential_decay_model_basic.stan")
#list.files('Stan_models',full.names = TRUE,pattern = '*stan')
model_settings = expand.grid(mod = all_mods,
prior = 1,
cov_matrices = 1)
model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4
writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
unique(model_settings$Nchain),
unique(model_settings$Niter),
unique(model_settings$Nwarmup),
unique(model_settings$Nthin),
unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))
model_setup_f_name = paste0('Rout/model_settings_type_', Lab, '.RData')
save(model_settings,
adastra_dat_analysis,
stan_inputs,
all_priors,
file = model_setup_f_name)
i <- 1
stan_input_job = stan_inputs[[i]]
analysis_data_stan = stan_input_job$analysis_data_stan
#analysis_data_stan$trt_mat = stan_input_job$Treatment_matrix
#analysis_data_stan$K_trt = ncol(analysis_data_stan$trt_mat)
# x_intercept = stan_input_job$cov_matrices$X_int[[model_settings$cov_matrices[i]]]
# if(ncol(x_intercept)==0) x_intercept = array(0, dim=c(nrow(x_intercept),1))
# analysis_data_stan$x_intercept = x_intercept
# analysis_data_stan$K_cov_intercept= ncol(x_intercept)
# x_slope = stan_input_job$cov_matrices$X_slope[[model_settings$cov_matrices[i]]]
# if(ncol(x_slope)==0) x_slope = array(0, dim=c(nrow(x_slope),1))
# analysis_data_stan$x_slope = x_slope
# analysis_data_stan$K_cov_slope=ncol(x_slope)
i <- 2
mod = stan_model(file = as.character(model_settings$mod[i])) # compile
out = sampling(mod,
data=c(analysis_data_stan,
all_priors[[model_settings$prior[i]]]),
iter=model_settings$Niter[i],
chain=model_settings$Nchain[i],
thin=model_settings$Nthin[i],
warmup=model_settings$Nwarmup[i],
save_warmup = FALSE,
seed=i,
cores = 4,
# pars=c('alpha_0', 'beta_0', 't_dof',
#        'sigma_logvl', 'sigmasq_u', 'L_Omega'), # only save trt effect parameter
include=T)
file_name = paste0('Rout/model_fits_type_', Lab, '_',i,'.RData')
save(out,
file = file_name)
trace <- traceplot(out, pars = c("sigma_logvl", "alpha_0", "beta_0", "sigmasq_u"))
trace <- traceplot(out, pars = c("sigma_logvl", "sigmasq_u"))
trace <- traceplot(out, pars = c("sigmasq_u"))
trace
