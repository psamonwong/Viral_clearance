) %>%
mutate(across(1:4, ~ if_else(row_number() > 1, "", .)))
write.table(missing_scr_failure, query_file_name, col.names=T, sep=",", append=TRUE, row.names = F) %>% suppressWarnings()
cat("\n", file=query_file_name, append=TRUE)
writeLines(sprintf('Query: %s\n',
missing_scr_failure$Query.message[1])
)
print(missing_scr_failure[,-(1:4)])
writeLines('##########################################################################')
ind <- clin_data$scrpassed == 0 & clin_data$Label != ""
a <- clin_data[ind,]
a
clin_data$Label
clin_data$scrpassed
ind <- clin_data$scrpassed == 0 & !is.na(clin_data$scrpassed) & clin_data$Label != ""
ind
a <- clin_data[ind,]
a
a$reason_failure
ind <- clin_data$scrpassed == 0 & !is.na(clin_data$scrpassed) & clin_data$Label != ""
failed_but_randomised <- clin_data[ind,] %>% select(scrid, scrpassed, Label, rangrp)
failed_but_randomised
failed_but_randomised <- clin_data[ind,] %>% select(scrid, scrpassed, reason_failure, Label, rangrp)
failed_but_randomised
failed_but_randomised <- data.frame("Dataset" = data_name, #Dataset
"CRF form/Topic" = "Screening", #'CRF form/Topic'
"Question/Variable" = "Eligibility", #'Question/Variable'
"Query message" = paste0(nrow(failed_but_randomised), " patients failed the screening but randomised to an arm."), #'Query message'
failed_but_randomised #'Example data'
) %>%
mutate(across(1:4, ~ if_else(row_number() > 1, "", .)))
failed_but_randomised
write.table(failed_but_randomised, query_file_name, col.names=T, sep=",", append=TRUE, row.names = F) %>% suppressWarnings()
cat("\n", file=query_file_name, append=TRUE)
writeLines(sprintf('Query: %s\n',
failed_but_randomised$Query.message[1])
)
print(failed_but_randomised[,-(1:4)])
writeLines('##########################################################################')
##############################################################################################
# AD ASTRA project
# This script prepares data for further analyses
##############################################################################################
library(dplyr)
library(readxl)
library(readr)
library(ggplot2)
library(lme4)
library(lubridate)
library(anytime)
library(ggpubr)
library(stringr)
##Define user folder path####################################################################
source('user_settings.R')
source("000_load_randomisation_database.R")
source("001_clean_clinical_database.R")
source("002_clean_vaccination_database.R")
source("00x_load_PCR_database.R")
options(max.print = 5000)
#############################################################################################
# 000 Randomization database
rand_app_data <- load_randomisation_data()
#############################################################################################
# 001 Clean clinical database
query_file_name <-  'Queries/01_AD_ASTRA_queries_clinical_database.csv'
data_name <- 'ASTInterimEnrolment.dta'
sink("Queries/01_queries_clinical_database.txt", split = T)
clin_data <- load_clinical_data(query_file_name)
IDs_pending <- check_MACRO_clinical_database(clin_data, rand_app_data)
clin_data <- check_screen_failure(clin_data, query_file_name)
clin_data <- check_randomisation_info(clin_data, query_file_name)
clin_data <- check_sex(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_age(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_symptom_onset(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_weight_height(clin_data, IDs_pending, query_file_name)
clin_data <- check_rand_date_time(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_rand_arms(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_inf_diagyn(clin_data, query_file_name)
clin_data <- merge(clin_data, rand_app_data %>% select(ID, fluType), by.x = "Label", by.y = "ID", all.x = T)
sink()
#############################################################################################
# 002 Clean vaccination database
sink("Queries/02_queries_vaccination_database.txt", split = T)
vacc_data <- load_vaccine_data(rand_app_data)
clin_data <- check_vaccine_data(clin_data, vacc_data, rand_app_data)
sink()
# fever_data <- prep_tempdata(temp_data, clin_data)
# check_time_temp(fever_data)
# clin_data <- add_baseline_fever(clin_data, fever_data)
# sink()
#############################################################################################
# Columns to be used in subsequent analyses
cols = c('ID','Time','Trt','Site','Timepoint_ID',
'Rand_date', 'weight',
'vaccine', 'inf_diagyn',
#'Fever_Baseline',
'BMI',
'Plate','BARCODE','fluType',
'Age', 'Sex', 'symptomDay',
'CT','CT_RNaseP','Lab','Lot no.')
#############################################################################################
## 00x PCR database
Res <- load_viral_pcr_data()
Res <- prep_PCR_data(Res)
SC <- extract_standard_curve(Res)
Res <- extract_PCR_sample_data(Res)
sink("Queries/0X_queries_PCR_database.txt", split = T)
Res <- merge_PCR_Clin_data(Res, clin_data)
sink()
Res <- predict_vl_from_CT(Res, SC, cols)   # MATCH RES COLUMNS TO COLS HERE
#############################################################################################
##################PREPARING DATA FOR SPECIFIC ANALYSIS#########################
##************************* No study drug analysis *************************#
Res_NSD_analysis =
Res %>% filter(Trt %in% c("No Study Drug"))
#
Res_NSD_analysis %>%
distinct(ID, .keep_all = T) %>%
group_by(inf_diagyn) %>%
summarise(n = n())
write.table(x = Res_NSD_analysis, file = '../Analysis_Data/no_study_drug_analysis.csv', row.names = F, sep=',', quote = F)
prefix_dropbox <- "C:/Users/Phrutsamon/Dropbox/ADASTRA_Analysis"
Site_i = "th001"
Final_date = as.Date("2024-10-26")
Arms = "No Study Drug"
final_status = haven::read_dta(paste0(prefix_dropbox, "/Data/ASTInterimFinalStatus.dta"))
enrolled = haven::read_dta(paste0(prefix_dropbox, "/Data/ASTInterimEnrolment.dta"))
rand_app_data <- load_randomisation_data()
check_data <- merge(rand_app_data, enrolled, by.x = "ID", by.y = "Label", all = T)
check_data <- check_data %>% filter(Site %in% Site_i,
!is.na(scrid))
assessed_number <- nrow(check_data)
table(check_data$scrpassed, useNA = 'always')
check_data %>% filter(scrpassed == 0) %>%
select(scrid, scrpassed, reason_failure, scrnote, rangrp, ID)
screen_fail_number <- sum(check_data$scrpassed == 0 & is.na(check_data$rangrp))
randomised_number <- assessed_number - screen_fail_number
check_data2 <- check_data %>%
filter(#Treatment %in% Arms,
scrdat <= Final_date)
check_data2
table(check_data2$Treatment, useNA = 'always')
IDs <- check_data2 %>%
filter(Treatment %in% Arms) %>%
pull(ID)
IDs %in% adastra_dat$ID #%in% IDs
#| echo: false
#Import data
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
from = c(1,2),
to = c('Male','Female'))
adastra_dat$inf_diagyn <- as.factor(adastra_dat$inf_diagyn)
randomised_number <- assessed_number - screen_fail_number
check_data2 <- check_data %>%
filter(#Treatment %in% Arms,
scrdat <= Final_date)
table(check_data2$Treatment, useNA = 'always')
IDs <- check_data2 %>%
filter(Treatment %in% Arms) %>%
pull(ID)
IDs %in% adastra_dat$ID #%in% IDs
a <- IDs[!IDs %in% adastra_dat$ID]
check_data2 %>%
filter(ID %in% a)
check_data %>% filter(is.na(Treatment))
table(check_data2$Treatment, useNA = 'always')
randomised_number
79+82+64
table(check_data2$Treatment, check_data2$fluType, useNA = 'always')
adastra_dat
# Checking if the patient has PCR data in early follow-up days (D0, D1, D2, D3)
check_PCR_missing <- adastra_dat %>%
mutate(count = 1,
Timepoint_ID = paste0("D", Timepoint_ID)) %>%
group_by(ID, Timepoint_ID) %>%
summarise(n = n()) %>%
pivot_wider(names_from = Timepoint_ID, values_from = n) %>%
mutate(all_pcr_early = !is.na(sum(D0, D1, D2, D3)))
adastra_dat <- merge(adastra_dat, check_PCR_missing[,c("ID", "all_pcr_early")], all.x = T)
adastra_dat
#| echo: false
#Import data
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
from = c(1,2),
to = c('Male','Female'))
adastra_dat$inf_diagyn <- as.factor(adastra_dat$inf_diagyn)
# Setting up the analysis
covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)
i <- 7
writeLines("Running the following job:")
print(model_settings[i,])
check_PCR_missing[,c("ID", "all_pcr_early")]
check_PCR_missing
53+12
setwd("D:/ADASTRA-SAP/Data_curation")
##############################################################################################
# AD ASTRA project
# This script prepares data for further analyses
##############################################################################################
library(dplyr)
library(readxl)
library(readr)
library(ggplot2)
library(lme4)
library(lubridate)
library(anytime)
library(ggpubr)
library(stringr)
##Define user folder path####################################################################
source('user_settings.R')
source("000_load_randomisation_database.R")
source("001_clean_clinical_database.R")
source("002_clean_vaccination_database.R")
source("00x_load_PCR_database.R")
options(max.print = 5000)
#############################################################################################
# 000 Randomization database
rand_app_data <- load_randomisation_data()
#############################################################################################
# 001 Clean clinical database
query_file_name <-  'Queries/01_AD_ASTRA_queries_clinical_database.csv'
data_name <- 'ASTInterimEnrolment.dta'
sink("Queries/01_queries_clinical_database.txt", split = T)
clin_data <- load_clinical_data(query_file_name)
IDs_pending <- check_MACRO_clinical_database(clin_data, rand_app_data)
clin_data <- check_screen_failure(clin_data, query_file_name)
clin_data <- check_randomisation_info(clin_data, query_file_name)
clin_data <- check_sex(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_age(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_symptom_onset(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_weight_height(clin_data, IDs_pending, query_file_name)
clin_data <- check_rand_date_time(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_rand_arms(clin_data, IDs_pending, rand_app_data, query_file_name)
clin_data <- check_inf_diagyn(clin_data, query_file_name)
clin_data <- merge(clin_data, rand_app_data %>% select(ID, fluType), by.x = "Label", by.y = "ID", all.x = T)
sink()
#############################################################################################
# 002 Clean vaccination database
sink("Queries/02_queries_vaccination_database.txt", split = T)
vacc_data <- load_vaccine_data(rand_app_data)
clin_data <- check_vaccine_data(clin_data, vacc_data, rand_app_data)
sink()
# fever_data <- prep_tempdata(temp_data, clin_data)
# check_time_temp(fever_data)
# clin_data <- add_baseline_fever(clin_data, fever_data)
# sink()
#############################################################################################
# Columns to be used in subsequent analyses
cols = c('ID','Time','Trt','Site','Timepoint_ID',
'Rand_date', 'weight',
'vaccine', 'inf_diagyn',
#'Fever_Baseline',
'BMI',
'Plate','BARCODE','fluType',
'Age', 'Sex', 'symptomDay',
'CT','CT_RNaseP','Lab','Lot no.')
#############################################################################################
## 00x PCR database
Res <- load_viral_pcr_data()
Res <- prep_PCR_data(Res)
SC <- extract_standard_curve(Res)
Res <- extract_PCR_sample_data(Res)
sink("Queries/0X_queries_PCR_database.txt", split = T)
Res <- merge_PCR_Clin_data(Res, clin_data)
sink()
Res <- predict_vl_from_CT(Res, SC, cols)   # MATCH RES COLUMNS TO COLS HERE
#############################################################################################
##################PREPARING DATA FOR SPECIFIC ANALYSIS#########################
##************************* No study drug analysis *************************#
Res_NSD_analysis =
Res %>% filter(Trt %in% c("No Study Drug"))
#
Res_NSD_analysis %>%
distinct(ID, .keep_all = T) %>%
group_by(inf_diagyn) %>%
summarise(n = n())
write.table(x = Res_NSD_analysis, file = '../Analysis_Data/no_study_drug_analysis.csv', row.names = F, sep=',', quote = F)
setwd("D:/Viral_clearance/Influenza")
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
library(webshot2)
library(webshot)
library(magick)
#conflicts_prefer(dplyr::filter)
## information on software/hardware used
version
sessionInfo()
rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F
my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('priors.R')
Dmax <- c(5.5, 7.5, 14.5) # Maximum follow-up duration to be included
mITT_threshold <- 250 #Threshold for baseline viral loads to be considered mITT
use_threshold = T
Type <- c("A", "B", "All")
all_mods <-  c("Stan_models/Exponential_decay_model_basic.stan",
"Stan_models/Bi_exponential_decay_model_basic.stan",
"Stan_models/Up_and_down_model_basic.stan")
model_settings <- expand.grid(Dmax = Dmax,
mITT_threshold = mITT_threshold,
use_threshold = use_threshold,
Type = Type,
mod = all_mods)
model_settings$Niter = 2000
model_settings$Nwarmup = 1000
model_settings$Nthin = 4
model_settings$Nchain = 4
model_settings$prior = 1
model_settings$cov_matrices = 1
write.csv(model_settings, "Outputs/model_settings.csv", row.names = F)
#| echo: false
#Import data
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
from = c(1,2),
to = c('Male','Female'))
adastra_dat$inf_diagyn <- as.factor(adastra_dat$inf_diagyn)
# Setting up the analysis
covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)
i <- 7
writeLines("Running the following job:")
print(model_settings[i,])
# Define populations by jobs
adastra_dat_i <- make_mITT(adastra_dat, model_settings$use_threshold[i], model_settings$mITT_threshold[i], model_settings$Type[i])
adastra_dat_i %>% distinct(ID, .keep_all = T) %>%
group_by(mITT, fluType) %>%
summarise(n = n(), .groups = "keep") %>%
print()
# Making analysis dataset
adastra_dat_analysis =
adastra_dat_i %>% ungroup() %>%
filter(Time <= model_settings$Dmax[i], mITT) %>%
arrange(log10_viral_load==log10_cens_vl) %>%
mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
Mean_age = mean(Age[!duplicated(ID)]),
SD_age = sd(Age[!duplicated(ID)]),
Age_scaled = (Age-Mean_age)/SD_age,
Site = as.factor(Site),
Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
Study_time = scale(Study_time)) %>%
group_by(ID, Timepoint_ID) %>%
mutate(daily_VL = mean(log10_viral_load),
daily_CT = mean(CT))
# Making baseline dataset
Baseline_data = adastra_dat_analysis %>% ungroup() %>%
filter(Timepoint_ID==0) %>%
distinct(ID, .keep_all = T) %>%
mutate(Baseline.viral.load = daily_VL,
Baseline.CT = daily_CT)
# Making Table 1: Baseline characteristics
tab.ff <- Baseline_data %>%
summary_factorlist(
dependent = "Trt", # name of grouping / treatment variable
explanatory = c("Site", "Age", 'BMI', 'weight',
'vaccine', 'inf_diagyn',
"Baseline.viral.load",'Sex', 'fluType' ,
'symptomDay'
),
total_col = TRUE, # add column with statistics for the whole sample
add_row_total = TRUE, # add column with number of valid cases
include_row_missing_col = FALSE,
add_dependent_label = T,
na_include = TRUE # make variables' missing data explicit
) %>%
kbl(
caption = "Baseline characteristics",
booktabs = TRUE,
align = "lrlrrr",
) %>%
kable_classic(full_width = FALSE)
tab.ff
# Setting up the analysis
covs_base = c('symptomDay','fluType', 'Study_time', 'Age_scaled')
covs_full=c(covs_base)
for(i in 1:nrow(model_settings)){
writeLines("Running the following job:")
print(model_settings[i,])
# Define populations by jobs
adastra_dat_i <- make_mITT(adastra_dat, model_settings$use_threshold[i], model_settings$mITT_threshold[i], model_settings$Type[i])
adastra_dat_i %>% distinct(ID, .keep_all = T) %>%
group_by(mITT, fluType) %>%
summarise(n = n(), .groups = "keep") %>%
print()
# Making analysis dataset
adastra_dat_analysis =
adastra_dat_i %>% ungroup() %>%
filter(Time <= model_settings$Dmax[i], mITT) %>%
arrange(log10_viral_load==log10_cens_vl) %>%
mutate(RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
Mean_age = mean(Age[!duplicated(ID)]),
SD_age = sd(Age[!duplicated(ID)]),
Age_scaled = (Age-Mean_age)/SD_age,
Site = as.factor(Site),
Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
Study_time = scale(Study_time)) %>%
group_by(ID, Timepoint_ID) %>%
mutate(daily_VL = mean(log10_viral_load),
daily_CT = mean(CT))
# Making baseline dataset
Baseline_data = adastra_dat_analysis %>% ungroup() %>%
filter(Timepoint_ID==0) %>%
distinct(ID, .keep_all = T) %>%
mutate(Baseline.viral.load = daily_VL,
Baseline.CT = daily_CT)
# Making Table 1: Baseline characteristics
tab.ff <- Baseline_data %>%
summary_factorlist(
dependent = "Trt", # name of grouping / treatment variable
explanatory = c("Site", "Age", 'BMI', 'weight',
'vaccine', 'inf_diagyn',
"Baseline.viral.load",'Sex', 'fluType' ,
'symptomDay'
),
total_col = TRUE, # add column with statistics for the whole sample
add_row_total = TRUE, # add column with number of valid cases
include_row_missing_col = FALSE,
add_dependent_label = T,
na_include = TRUE # make variables' missing data explicit
) %>%
kbl(
caption = "Baseline characteristics",
booktabs = TRUE,
align = "lrlrrr",
) %>%
kable_classic(full_width = FALSE)
tab.ff
save_kable(tab.ff,file = paste0('Plots/Baseline_Characteristics/job_', i, '.html'))
# Analysis data
writeLines(sprintf('Analysis dataset contains %s patients and %s datapoints (%s above LLOD, %s%%)',
length(unique(adastra_dat_analysis$ID)),
nrow(adastra_dat_analysis),
sum(adastra_dat_analysis$CT<40),
round(100*mean(adastra_dat_analysis$CT<40))))
# Making stan inputs
stan_inputs <- NULL
stan_inputs =
make_stan_inputs(input_data_fit = adastra_dat_analysis,
int_covs_base = covs_base,
int_covs_full = covs_full,
slope_covs_base = c('fluType','Study_time'),
slope_covs_full = covs_full,
Dmax = model_settings$Dmax[i])
writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
unique(model_settings$Nchain),
unique(model_settings$Niter),
unique(model_settings$Nwarmup),
unique(model_settings$Nthin),
unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))
model_setup_f_name = paste0('Rout/model_settings_job_', i,'.RData')
save(model_settings,
adastra_dat_analysis,
adastra_dat_i,
stan_inputs,
all_priors,
file = model_setup_f_name)
}
15+14+53
92-84
i <- 7
#| echo: false
#Import data
f_name = 'Analysis_Data/no_study_drug_analysis.csv'
adastra_dat = read.csv(f_name)
adastra_dat$Rand_date = as.POSIXct(adastra_dat$Rand_date)
adastra_dat$Sex <- plyr::mapvalues(x = as.numeric(adastra_dat$Sex),
from = c(1,2),
to = c('Male','Female'))
adastra_dat$inf_diagyn <- as.factor(adastra_dat$inf_diagyn)
unique(adastra_dat$ID)
for(i in 1:nrow(model_settings)){
load(paste0('Rout/model_settings_job_', i,'.RData'))
analysis_data_stan = stan_inputs$analysis_data_stan
mod = stan_model(file = as.character(model_settings$mod[i])) # compile
out = sampling(mod,
data=c(analysis_data_stan,
all_priors[[model_settings$prior[i]]]),
iter=model_settings$Niter[i],
chain=model_settings$Nchain[i],
thin=model_settings$Nthin[i],
warmup=model_settings$Nwarmup[i],
save_warmup = T,
seed=i,
cores = 4,
include=T)
file_name = paste0('Rout/model_fits_job_', i, '.RData')
print(file_name)
save(out,
file = file_name)
}
