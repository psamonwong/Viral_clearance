library(rstan)
library(matrixStats)
library(doParallel)
rstan_options(auto_write = TRUE)
source('sample_size_functions.R')
setwd("D:/Viral_clearance/Influenza")
library(rstan)
library(matrixStats)
library(doParallel)
rstan_options(auto_write = TRUE)
source('sample_size_functions.R')
source('priors.R')
# use the linear model fits for simplicity
load('Rout/model_fits_job_1.RData')
# get the individual slope estimates
thetas = rstan::extract(out); rm(out)
my_LOD = 1
ncores = 4
options(mc.cores = ncores)
## Set up all simulation settings
Trt_effect_pos_control = 1.6
Trt_effect_neg_control = 1
trt_intervention = seq(from=1.4, to=2.8, by=.4)
trt_intervention
trt_intervention = seq(from=1.4, to=1.8, by=.4)
trt_intervention
Ns = seq(40,240,40)
Nsims = 50
#Basic
k_slope = c(1) #Varying population slopes
k_sigma_logvl = c(0.5,1,2) # Varying measurement errors (intra-individual variations)
k_sigmasq_u = c(1) # Varying baseline viral load and slope variations (inter-individual variations)
sim_settings = expand.grid(N=Ns,
sim_k = 1:Nsims,
k_slope = k_slope,
k_sigma_logvl = k_sigma_logvl,
k_sigmasq_u = k_sigmasq_u,
# k_sigmasq_u_2 = k_sigmasq_u_2,
trt_effect_comp = trt_intervention,
trt_control = c(Trt_effect_neg_control,
Trt_effect_pos_control))
sim_settings
## Set up all simulation settings
Trt_effect_pos_control = 1.6
Trt_effect_neg_control = 1
trt_intervention = seq(from=1.4, to=1.8, by=.4)
Ns = seq(40,240,40)
Nsims = 50
#Basic
k_slope = c(1) #Varying population slopes
k_sigma_logvl = c(1) # Varying measurement errors (intra-individual variations)
k_sigmasq_u_1 = c(0.5, 1, 2) # Varying baseline viral load variations (inter-individual variations)
k_sigmasq_u_2 = c(0.5, 1, 2) # Varying slope variations (inter-individual variations)
sim_settings = expand.grid(N=Ns,
sim_k = 1:Nsims,
k_slope = k_slope,
k_sigma_logvl = k_sigma_logvl,
k_sigmasq_u_1 = k_sigmasq_u_1,
k_sigmasq_u_2 = k_sigmasq_u_2,
# k_sigmasq_u_2 = k_sigmasq_u_2,
trt_effect_comp = trt_intervention,
trt_control = c(Trt_effect_neg_control))#,
sim_settings <- sim_settings %>% filter(k_sigmasq_u_1 == 1|k_sigmasq_u_2 == 1)
library(dplyr)
sim_settings <- sim_settings %>% filter(k_sigmasq_u_1 == 1|k_sigmasq_u_2 == 1)
sim_settings
#Basic
k_slope = c(1) #Varying population slopes
k_sigma_logvl = c(0.5,1,2) # Varying measurement errors (intra-individual variations)
k_sigmasq_u = c(1) # Varying baseline viral load and slope variations (inter-individual variations)
sim_settings = expand.grid(N=Ns,
sim_k = 1:Nsims,
k_slope = k_slope,
k_sigma_logvl = k_sigma_logvl,
k_sigmasq_u = k_sigmasq_u,
# k_sigmasq_u_2 = k_sigmasq_u_2,
trt_effect_comp = trt_intervention,
trt_control = c(Trt_effect_neg_control,
Trt_effect_pos_control))
sim_settings
args = commandArgs(trailingOnly = FALSE) # comes from the SGE_TASKID in *.sh file
i = as.numeric(args[6])
print(paste0("job(i) = ", i)) # this will print out in the *.o file
library(rstan)
library(matrixStats)
library(doParallel)
rstan_options(auto_write = TRUE)
source('sample_size_functions.R')
source('priors.R')
# use the linear model fits for simplicity
load('Rout/model_fits_job_1.RData')
# get the individual slope estimates
thetas = rstan::extract(out); rm(out)
my_LOD = 1
ncores = 4
options(mc.cores = ncores)
## Set up all simulation settings
Trt_effect_pos_control = 1.6
Trt_effect_neg_control = 1
trt_intervention = seq(from=1.4, to=1.8, by=.4)
#NI_delta = log(1.6)-log(1.4)
Ns = seq(40,240,40)
Nsims = 50
#Basic
k_slope = c(1) #Varying population slopes
k_sigma_logvl = c(0.5,1,2) # Varying measurement errors (intra-individual variations)
k_sigmasq_u = c(1) # Varying baseline viral load and slope variations (inter-individual variations)
#k_sigmasq_u_2 = c(2) # Varying slope variations (inter-individual variations)
sim_settings = expand.grid(N=Ns,
sim_k = 1:Nsims,
k_slope = k_slope,
k_sigma_logvl = k_sigma_logvl,
k_sigmasq_u = k_sigmasq_u,
# k_sigmasq_u_2 = k_sigmasq_u_2,
trt_effect_comp = trt_intervention,
trt_control = c(Trt_effect_neg_control,
Trt_effect_pos_control))
save(sim_settings, file = 'Rout/sim_settings_sigma_logvl_supplement.RData')
### set up simulation for the settings i
print(sim_settings[i, ])
sim_settings
