ggplot(result, aes(x = t)) +
geom_line(aes(y = LQ)) +
geom_line(aes(y = A))
ggplot(result, aes(x = t)) +
geom_line(aes(y = LQ)) +
geom_line(aes(y = A), col = "red")
library(tidyr)
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values")
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
as.data.frame()
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage) %>%
as.data.frame()
result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
ggplot(result[result$stage != "H",], aes(x = t, y = value, col = stage)) +
theme_bw()
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
theme_bw()
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
a <- 30 * exp(-0.0075 * 1:100)
plot(1:100, a, type = "l")
################################################################################
a <- 30 * exp(-0.0075 * 1:1000)
plot(1:1000, a, type = "l")
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result
# Solve the model
result <- mod$run(times, yini,
d_H = 0.001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Solve the model
result <- mod$run(times, yini,
d_H = 0.00001) %>% as.data.frame()
#install.packages("odin")
################################################################################
# Load the odin package
library(odin)
library(dplyr)
library(ggplot2)
library(tidyr)
################################################################################
# Define the model using odin
# Model 1 from Kim 2010
# Mite-host dynamics without infections
pop_model <- odin::odin({
# The ODEs
deriv(LQ) <- a * A - d_L * LQ - beta * H * LQ # questing larvae
deriv(LF) <- beta * H * LQ - sigma * LF # feeding larvae
deriv(A) <- m * sigma * LF - d_A * A # adults
deriv(H) <- (b - d_H) * H # Host dynamics
a <- r * exp(-s * M) #birth rate as a function of population size
# Total population
M <- LQ + LF + A
# Parameters
r <- user(30) # average offspring
s <- user(0.0075) # s > 0 density-dependent regulation
d_L <- user(0.0056) # mortality rate of larvae
beta <- user(0.015) # encounter rate between questing larvae and hosts
sigma <- user(0.1) # dropping rate
m <- user(0.15) # averaged fraction of immature feeding mites which survies and develops to the next stage
d_A <- user(0.006) # mortality rate of adults
b <- user(0.003) # birth rate of hosts
d_H <- user(0.003) # death rate of hosts
# Initial conditions
initial(LQ) <- 0
initial(LF) <- 0
initial(A) <- 1
initial(H) <- 20
})
################################################################################
# Generate the model
mod <- pop_model$new()
# Time points to solve the model at
times <- seq(0, 500, by = 1)
# Initial state
yini <- c(LQ = 0, LF = 0, A = 1, H = 20)
# Solve the model
result <- mod$run(times, yini,
d_H = 0.00001) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
result
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.001)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.01)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "H",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.005)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.008)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
# Generate the model
mod <- pop_model$new(d_H = 0.00, b = 0.009)
# Solve the model
result <- mod$run(times, yini) %>% as.data.frame()
result <- result %>%
pivot_longer(!t, names_to = "stage", values_to = "values") %>%
arrange(stage, t) %>%
as.data.frame()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line() +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw()
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15)
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15) +
xlab("Time")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 15) +
xlab("Time") +
ylab("Counts")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1) +
theme_bw(base_size = 20) +
xlab("Time") +
ylab("Counts")
################################################################################
ggplot(result[result$stage != "",], aes(x = t, y = values, col = stage)) +
geom_line(linewidth = 1.5) +
theme_bw(base_size = 20) +
xlab("Time") +
ylab("Counts")
1+1
2+3
11111.1
setwd("~/Project/Viral_clearance/Influenza")
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
library(webshot2)
library(webshot)
library(magick)
#conflicts_prefer(dplyr::filter)
## information on software/hardware used
version
sessionInfo()
rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F
my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('priors.R')
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 5.5
Type <- "All"
model_settings$mod
ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type, grepl("Up_and_down", model_settings$mod))
ind
model_settings[ind,]
grepl("Up_and_down", model_settings$mod)
ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type & grepl("Up_and_down", model_settings$mod))
ind
load(paste0("Rout/model_settings_job_", ind, ".RData"))
load(paste0("Rout/model_fits_job_", ind, ".RData"))
thetas <- rstan::extract(out)
thetas
thetas$tmax_pop
hist(thetas$tmax_pop)
median(thetas$tmax_pop)
thetas$theta_rand_id[,3]
thetas$theta_rand_id
thetas$theta_rand_id[,,3]
thetas$theta_rand_id[,,3] + 1
thetas$theta_rand_id[,,3] + thetas$tmax_pop
thetas$tmax_pop
apply(thetas$theta_rand_id[,,3], 2, function (x) x + thetas$tmax_pop)
apply(thetas$theta_rand_id[,,3], 1, function (x) x + thetas$tmax_pop)
apply(thetas$theta_rand_id[,,3], 2, function (x) x + thetas$tmax_pop)
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop)
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(1, median)
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median)
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, quantile, c(0.025, 0.5, 0.975))
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, quantile, c(0.025, 0.5, 0.975)) %>%
t()
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median) %>%
t()
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median)
thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median) %>%
hist()
symptomDay <- stan_inputs$cov_matrices$X_int[[1]][,1][stan_inputs$analysis_data_stan$ind_start]
symptomDay
tmax <- thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median) %>%
hist()
plot(symptomDay, tmax)
symptomDay
tmax <- thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$tmax_pop) %>%
apply(2, median)
plot(symptomDay, tmax)
cor.test(symptomDay, tmax, method = 'spearman')
tmax %>%
quantile(c(0.25, 0.5, 0.75))
tmax %>%
quantile(c(0.25, 0.5, 0.75)) %>%
round()
tmax > 0
sum(tmax > 0)
sum(tmax > 0)
sum(tmax > 0)/76
sum(tmax < 0)/76
sum(tmax < 0)
sum(tmax > 0 & tmax < 1)
sum(tmax > 0 & tmax < 1)/76
sum(tmax > 0 & tmax < 1)/(76-48)
(76-48)
sum(tmax > 1)/(76-48)
sum(tmax > 1)/(76)
sum(tmax > 1)
sum(tmax < 0)/(length(tmax))
sum(tmax > 1)/(length(tmax))
####################################################################################################
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 5.5
Type <- "All"
ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type & grepl("Bi-exponential", model_settings$mod))
ind
ind <- which(model_settings$Dmax == Dmax & model_settings$Type == Type & grepl("Bi_exponential", model_settings$mod))
ind
load(paste0("Rout/model_settings_job_", ind, ".RData"))
load(paste0("Rout/model_fits_job_", ind, ".RData"))
thetas <- rstan::extract(out)
thetas
thetas <- rstan::extract(out)
thetas$intercept
thetas$intercept %>%
apply(2,median)
thetas$intercept[,1]
intercept_1 <- thetas$theta_rand_id[,,3] %>% apply(2, function (x) x + thetas$intercept[,1]) %>%
apply(2, median)
intercept_1
hist(intercept_1)
sum(intercept_1 < 2)/(length(intercept_1))
sum(intercept_1 < 2)
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
library(webshot2)
library(webshot)
library(magick)
library(GGally)
#conflicts_prefer(dplyr::filter)
## information on software/hardware used
version
sessionInfo()
rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F
my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('priors.R')
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 5.5
Type <- c("A", "B", "All")
Mod <- "Exponential"
ind <- which(model_settings$Dmax == Dmax & model_settings$Type %in% Type &
grepl(Mod, model_settings$mod))
#| echo: false
summary_Params <- NULL
posterior_Params <- list()
for(i in 1:length(ind)){
load(paste0("Rout/model_settings_job_", ind[i], ".RData"))
load(paste0("Rout/model_fits_job_", ind[i], ".RData"))
sigmasq_u1 <- rstan::extract(out, pars = "sigmasq_u")[[1]][,1]
sigmasq_u2 <- rstan::extract(out, pars = "sigmasq_u")[[1]][,2]
sigma_logvl <- rstan::extract(out, pars = "sigma_logvl")[[1]]
alpha_0 <- rstan::extract(out, pars = "alpha_0")[[1]]
beta_0 <- rstan::extract(out, pars = "beta_0")[[1]]
posterior_params <- cbind(sigmasq_u1, sigmasq_u2, sigma_logvl, alpha_0, beta_0)
summary_params <- apply(posterior_params,2, quantile, my_probs) %>% t() %>% as.data.frame()
colnames(summary_params) <- c("P2.5", "P10", "P50", "P90", "P97.5")
summary_params$params <- row.names(summary_params)
summary_params$Type <- model_settings$Type[ind[i]]
summary_Params <- rbind(summary_Params, summary_params)
posterior_params <- posterior_params %>% as.data.frame()
posterior_Params[[i]] <- posterior_params
}
row.names(summary_Params) <- NULL
summary_Params
summary_Params
#library(conflicted)
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(lubridate)
library(brms)
library(ggplot2)
library(ggpubr)
library(scales)
library(cowplot)
library(grid)
library(webshot2)
library(webshot)
library(magick)
library(GGally)
#conflicts_prefer(dplyr::filter)
## information on software/hardware used
version
sessionInfo()
rstan_options(auto_write = TRUE)
## parameters for the analysis
RUN_MODELS = F
my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
source('priors.R')
model_settings <- read.csv("Outputs/model_settings.csv")
Dmax <- 5.5
Type <- c("All")
Mod <- "Exponential"
ind <- which(model_settings$Dmax == Dmax & model_settings$Type %in% Type &
grepl(Mod, model_settings$mod))
#| echo: false
load(paste0("Rout/model_settings_job_", ind, ".RData"))
load(paste0("Rout/model_fits_job_", ind, ".RData"))
slope <- rstan::extract(out, pars = "slope")[[1]]
summary_slope <- slope %>% apply(2, quantile, my_probs)
summary_hl <- slope_to_hl(summary_slope) %>% t() %>% as.data.frame()
colnames(summary_hl) <- c("P2.5", "P10", "P50", "P90", "P97.5")
fluTypes <- stan_inputs$cov_matrices$X_slope[[1]][,'fluTypeB'][stan_inputs$analysis_data_stan$ind_start]
summary_hl$fluType <- ifelse(fluTypes == 0, "A", "B")
summary_hl
summary_Params$Type <- as.factor(summary_Params$Type)
levels(summary_Params$Type) <- c("Influenza A", "Influenza B", "Both types")
summary_Params$params <- as.factor(summary_Params$params)
summary_Params$facet <- c("alpha[0]", "beta[0]", "sigma[u[1]]^{2}", "sigma[u[2]]^{2}", "sigma[logvl]")[as.numeric(summary_Params$params)]
summary_Params$Type <- as.factor(summary_Params$Type)
levels(summary_Params$Type) <- c("Influenza A", "Influenza B", "Both types")
summary_Params$params <- as.factor(summary_Params$params)
summary_Params$facet <- c("alpha[0]", "beta[0]", "sigma[u[1]]^{2}", "sigma[u[2]]^{2}", "sigma[logvl]")[as.numeric(summary_Params$params)]
G <- ggplot(summary_Params, aes(x = Type, y = P50, col = Type)) +
geom_point(size = 3) +
geom_errorbar(aes(x = Type, ymin = P2.5, ymax = P97.5),
width = 0.1, linewidth = 0.85) +
theme_bw(base_size = 10) +
facet_wrap(.~facet, scales = 'free', labeller = label_parsed) +
scale_color_manual(values = c("#EE4266", "#387ADF", "gray20"), guide = NULL) +
xlab("") +
ylab("Parameter estimates") +
theme(strip.text = element_text(size = 9),
panel.spacing = unit(1, "lines"))
G
summary_hl <- summary_hl %>% arrange(fluType, P50)
summary_hl$fluType <- as.factor(summary_hl$fluType)
summary_hl$ID <- 1:nrow(summary_hl)
summary_hl_med_type <- summary_hl %>% group_by(fluType) %>%
reframe(Q1 = quantile(P50, 0.25),
Q2 = quantile(P50, 0.5),
Q3 = quantile(P50, 0.75)) %>%
mutate(lab = paste0("Influenza ", fluType, ": ",
round(Q2,1), " h [IQR: ",
round(Q1,1), " to ",
round(Q3,1), " h]"))
summary_hl_med <- summary_hl %>%
reframe(Q1 = quantile(P50, 0.25),
Q2 = quantile(P50, 0.5),
Q3 = quantile(P50, 0.75)) %>%
mutate(lab = paste0("Influenza A and B: ",
round(Q2,1), " h [IQR: ",
round(Q1,1), " to ",
round(Q3,1), " h]"))
labs <- paste(c(summary_hl_med_type$lab, summary_hl_med$lab),collapse="\n")
summary_hl_med
summary_hl_med_type
summary_slope
summary_Params
summary_Params
summary_Params %>%
filter(params == "beta_0") %>%
mutate(med_hl = slope_to_hl(P50))
summary_Params %>%
filter(params == "beta_0") %>%
mutate(med_hl = slope_to_hl(P50),
low_hl = slope_to_hl(P2.5),
up_hl = slope_to_hl(P97.5))
